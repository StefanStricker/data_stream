services: 

    kafka:
        image: "bitnami/kafka:latest"
        hostname: kafka
        container_name: kafka
        ports:
        - "9092:9092"

        environment:
        - KAFKA_ENABLE_KRAFT=yes
        - KAFKA_KRAFT_CLUSTER_ID=Hjfd984UFJ23kfds       
        - KAFKA_CFG_NODE_ID=0
        - KAFKA_CFG_PROCESS_ROLES=controller,broker
        - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
        - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
        - KAFKA_INTER_BROKER_LISTENER_NAME=PLAINTEXT
        - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
        - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
        - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
        - ALLOW_PLAINTEXT_LISTENER=yes
        volumes:
        - kafka_data:/bitnami/kafka
        restart: on-failure
        healthcheck:
            test: ["CMD", "bash", "-c", "kafka-topics.sh --bootstrap-server localhost:9092 --list || exit 1"]
            interval: 10s
            timeout: 5s
            retries: 5

    mongodb:
        image: mongo
        ports:
            - "27017:27017"        
        volumes: 
        - mongo:/data/db
        restart: on-failure
        healthcheck:
            test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
            interval: 10s
            timeout: 5s
            retries: 5

    generator:
        build: ./data_generator    
        restart: on-failure  
        depends_on:
            - kafka  
            
    producer:
        build: ./kafka/producer
        environment:
        - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
        - KAFKA_TOPIC=sensor-data
        depends_on:
            kafka:
                condition: service_healthy
            mongodb:
                condition: service_healthy        
        restart: on-failure

    consumer:
        build: ./kafka/consumer
        environment:
        - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
        - MONGO_URI=mongodb://mongodb:27017/
        - KAFKA_TOPIC=sensor-data
        - KAFKA_GROUP_ID=mongo-writer-group
        depends_on:
            kafka:
                condition: service_healthy
            mongodb:
                condition: service_healthy
        restart: on-failure

    prometheus:
        image: prom/prometheus:latest
        container_name: prometheus
        ports:
            - "9090:9090"        
        volumes:    
            - prometheus-data:/prometheus
            - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
        restart: on-failure    

    grafana:
        image: grafana/grafana:latest          
        container_name: grafana
        ports:
            - "3000:3000"
        environment:
            - GF_INSTALL_PLUGINS=yesoreyeram-infinity-datasource      
        volumes:
            - grafana-data:/var/lib/grafana
            - ./grafana:/etc/grafana
            - ./grafana:/var/lib/grafana/dashboards    
        restart: on-failure


#Prometheus exporters
    kafka-exporter:
        image: danielqsj/kafka-exporter:latest
        container_name: kafka-exporter
        environment:
        - KAFKA_BROKERS=kafka:9092
        depends_on:
        - kafka
        restart: on-failure

    mongodb-exporter:
        image: bitnami/mongodb-exporter:latest
        container_name: mongodb-exporter
        environment:
        - MONGODB_URI=mongodb://mongodb:27017
        depends_on:
        - mongodb
        restart: on-failure

    query_api:
        build: ./query_api
        ports:
            - "5001:5001"
        depends_on:
            - mongodb
        restart: on-failure
    

volumes:
  kafka_data:
  mongo:        
  prometheus-data:
  grafana-data: